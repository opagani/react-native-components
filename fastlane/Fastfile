#!/usr/bin/env ruby -wKU

default_platform :ios

platform :ios do
  
  def undo_icon_file_changes
    checkout_command = "git checkout #{@absolute_icon_path}"
    puts "executing #{checkout_command}"
    sh (checkout_command)
  end
  
  before_all do
    import_from_git(
        url: 'git@stash.sv2.trulia.com:mob/mob-build.git',
        branch: 'master',
        path: 'ios/fastlane/Fastfile'
    )

    # import '/Users/fhaider/Source/Git/mob-build/ios/fastlane/Fastfile'

    unlock_keychain(path: '~/Library/Keychains/login.keychain', password: 'p@55w0rd')

    @app_name = 'Trulia'
    @modulation = 66.6
    @project_name = 'Trulia Rent.xcodeproj'
    @workspace = 'Trulia Rent.xcworkspace'
    @scheme = 'Trulia Rent'
    @product_name = 'TruliaRent'
    @upload_dir_app_type = 'IosRental'
    @mstage_user= 'web'
    @hockeyapp_token = 'f9ea5344004d44cfa154efab77887b72'
    @absolute_icon_path = File.expand_path "../Trulia\\ Rent/Resources/Assets.xcassets/AppIcon.appiconset"
    @info_plist_path = './Trulia Rent/Info.plist'
    @upload_symbols_binary_path = File.expand_path './upload-symbols'
    
    undo_icon_file_changes
  end




  desc 'Build and deploy a new CI build on HockeyApp (https://rink.hockeyapp.net/manage/apps/244754)'
  lane :stage do |options|

    raise 'You must specify a path to the ioscore library' if options[:core_library_path].nil?
    
    cocoapods
    
    #params for the build
    hockey_app_id = 'b9d5c909ff044ee09be8524e2d773352'

    sigh(app_identifier: 'com.truliainc.IosRental')
    sigh(app_identifier: 'com.truliainc.IosRental.MessagesExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationListingContentExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationGridContentExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationServiceExtension')

    build_number = next_hockey_version(api_token: @hockeyapp_token, app_id: hockey_app_id).to_s

    build_and_upload(
        info_plist_path: @info_plist_path,
        # update the icons if in stage
        color_icon: true,
        # bake the build number into icons
        build_number_icon: true,
        # Modulate the colors of the icons by these degrees
        modulation: 66.6,
        # What configuration to use, usefull for keeping different API keys etc between environments
        configuration: 'Stage',
        # Export an enterprise app
        export_method: 'enterprise',
        # the projectname, this is the name of the .xcodeproj file and the folder containing your code in the project
        project_name: @project_name,
        # workspace
        workspace: @workspace,
        # the scheme to build
        scheme: @scheme,
        # the build number to use, we use the build number + 1 from latest hockey app version uploaded to stage
        build_number: build_number,
        # the number prefix to use to bake into icons, S for stage, B for BStage, and R for enterprise_release.
        build_number_prefix: 'B',
        # icons folder path so that we can update the icons
        icon_folder_path: @absolute_icon_path,
        # passes in the mobile provisiong profile info explicitly
        # xcargs: xcargs,
        product_name: @product_name,
        # this is needed for the upload to mstage. This specifies the folder on the server to put the app and archive into
        upload_dir_app_type: @upload_dir_app_type,
        # the subfolder within which to upload, generall it is qa, dev or rel;
        upload_dir_build_type: 'qa',
        # hockey app id to use
        hockeyapp_id: hockey_app_id,
        # hockey app token to use
        hockeyapp_token: @hockeyapp_token,
        # the team IDs to notify when a new build is published
        mstage_user: @mstage_user,
        # the JIRA host to search for issues to update based on these changes
        jira_host: 'jira.corp.trulia.com',
        # core library path, this is used to get the change log for the core library
        core_library_path:options[:core_library_path],
        # fabric's binary path to upload the dsyms
        fabric_binary_path: @upload_symbols_binary_path
    )
    undo_icon_file_changes
  end
  



  desc 'Build and deploy a release candidate version on Hockey (https://rink.hockeyapp.net/manage/apps/246152)'
  lane :rc do |options|

    raise 'You must specify a path to the ioscore library' if options[:core_library_path].nil?
    
    # lets setup the pods first
    cocoapods
    
    #params for the build
    hockey_app_id = 'a219c9215a4f4b9ea9f43358e6cb0a7a'

    sigh(app_identifier: 'com.truliainc.IosRental')
    sigh(app_identifier: 'com.truliainc.IosRental.MessagesExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationListingContentExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationGridContentExtension')
    sigh(app_identifier: 'com.truliainc.IosRental.TRLNotificationServiceExtension')

    build_number = next_hockey_version(api_token: @hockeyapp_token, app_id: hockey_app_id).to_s

    build_and_upload(
        info_plist_path: @info_plist_path,
        # update the icons if in stage
        color_icon: false,
        # bake the build number into icons
        build_number_icon: true,
        # Not a production release, so add build number and do the color modulation of the icons
        release: false,
        # Modulate the colors of the icons by these degrees
        modulation: 66.6,
        # What configuration to use, usefull for keeping different API keys etc between environments
        configuration: 'Stage',
        # Export an enterprise app
        export_method: 'enterprise',
        # the projectname, this is the name of the .xcodeproj file and the folder containing your code in the project
        project_name: @project_name,
        # workspace
        workspace: @workspace,
        # the scheme to build
        scheme: @scheme,
        # the build number to use, we use the build number + 1 from latest hockey app version uploaded to stage
        build_number: build_number,
        # the number prefix to use to bake into icons, S for stage, B for BStage, and R for enterprise_release.
        build_number_prefix: 'RC',
        # icons folder path so that we can update the icons
        icon_folder_path: @absolute_icon_path,
        product_name: @product_name,
        # this is needed for the upload to mstage. This specifies the folder on the server to put the app and archive into
        upload_dir_app_type: @upload_dir_app_type,
        # the subfolder within which to upload, generall it is qa, dev or rel;
        upload_dir_build_type: 'qa',
        # hockey app id to use
        hockeyapp_id: hockey_app_id,
        # hockey app token to use
        hockeyapp_token: @hockeyapp_token,
        # the team IDs to notify when a new build is published
        mstage_user: @mstage_user,
        # the JIRA host to search for issues to update based on these changes
        jira_host: 'jira.corp.trulia.com',
        # core library path, this is used to get the change log for the core library
        core_library_path:options[:core_library_path],
        # fabric's binary path to upload the dsyms
        fabric_binary_path: @upload_symbols_binary_path
    )
    undo_icon_file_changes
  end



  

  desc 'Build and deploy an appstore ready version'
  lane :appstore do |options|
    
    raise 'You must specify a path to the ioscore library' if options[:core_library_path].nil?
    
    hockey_app_id = '215568fb16f34b60aea835757b2634b9'
    
    build_number = options[:build_number] ||  (next_hockey_version(api_token: @hockeyapp_token, app_id: hockey_app_id) - 1).to_s
    
    cocoapods

    sigh(app_identifier: 'com.trulia.IosRental', adhoc: true)
    sigh(app_identifier: 'com.trulia.IosRental.MessagesExtension', adhoc: true)
    sigh(app_identifier: 'com.trulia.IosRental.TRLNotificationListingContentExtension', adhoc: true)
    sigh(app_identifier: 'com.trulia.IosRental.TRLNotificationGridContentExtension', adhoc: true)
    sigh(app_identifier: 'com.trulia.IosRental.TRLNotificationServiceExtension', adhoc: true)
    
    build_and_upload(
        info_plist_path: @info_plist_path,
        # update the icons if in stage
        color_icon: false,
        # bake the build number into icons
        build_number_icon: false,
        # Modulate the colors of the icons by these degrees
        modulation: 66.6,
        # What configuration to use, usefull for keeping different API keys etc between environments
        configuration: 'Appstore',
        # Export an enterprise app
        export_method: 'ad-hoc',
        # the projectname, this is the name of the .xcodeproj file and the folder containing your code in the project
        project_name: @project_name ,
        # workspace
        workspace: @workspace,
        # the scheme to build
        scheme: @scheme,
        # the build number to use, we use the build number + 1 from latest hockey app version uploaded to stage
        build_number: build_number,
        # the number prefix to use to bake into icons, S for stage, B for BStage, and R for enterprise_release.
        build_number_prefix: 'R',
        # icons folder path so that we can update the icons
        icon_folder_path: @absolute_icon_path,
        product_name: @product_name,
        # this is needed for the upload to mstage. This specifies the folder on the server to put the app and archive into
        upload_dir_app_type: @upload_dir_app_type,
        # the subfolder within which to upload, generall it is qa, dev or rel;
        upload_dir_build_type: 'rel',
        # hockey app id to use
        hockeyapp_id: hockey_app_id,
        # hockey app token to use
        hockeyapp_token: @hockeyapp_token,
        # the user to use to upload to mstage
        mstage_user: @mstage_user,
        # core library path, this is used to get the change log for the core library
        core_library_path:options[:core_library_path],
        # fabric's binary path to upload the dsyms
        fabric_binary_path: @upload_symbols_binary_path
    )

  end



  desc 'Downloads the dsyms from itunes and uploads to crashlytics'
  lane :refresh_dsyms do |options| 
    refresh_dsyms_from_itc(fabric_binary_path: @upload_symbols_binary_path, )
  end



  
  after_all do |lane|
    undo_icon_file_changes
    clean_build_artifacts
  end

  error do |lane, exception|
    undo_icon_file_changes    
    clean_build_artifacts
  end
  
end
